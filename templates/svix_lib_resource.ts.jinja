{% set resource_type_name = resource.name | to_upper_camel_case -%}
{% set api_type_name %}{{ resource_type_name }}Api{% endset -%}

import {
    Configuration,
    {{ api_type_name }},
    {% for c in referenced_components -%}
        {{ c | to_upper_camel_case }},
    {% endfor -%}
} from "../openapi";
import { PostOptions } from "../util";

{% for op in resource.operations -%}
    {% if op.query_params | length > 0 -%}
    export interface {{ resource_type_name }}{{ op.name | to_upper_camel_case }}Options {
        {% for p in op.query_params -%}
            {{ p.description | to_doc_comment(style="js") }}
            {{ p.name | to_lower_camel_case }}{% if not p.required %}?{% endif %}: {{ p.type.to_js() }},
        {% endfor -%}
    }

    {% endif -%}
{% endfor -%}

export class {{ resource_type_name }} {
    private readonly api: {{ api_type_name }};

    public constructor(config: Configuration) {
        this.api = new {{ api_type_name }}(config);
    }

    {% for op in resource.operations -%}
        {% set has_query_params = op.query_params | length > 0 -%}
        {% set has_required_query_params =
            op.query_params | selectattr("required") | length > 0 -%}
        {% set has_header_params = op.header_params | length > 0 -%}
        {% set response_type =
            op.response_body_schema_name | default("void") | replace("_", "") -%}
        {{ op.description | to_doc_comment(style="js") }}
        public {{ op.name | to_lower_camel_case }}(
            {# path parameters -#}
            {% for p in op.path_params -%}
                {{ p | to_lower_camel_case }}: string,
            {% endfor -%}

            {# body parameter interface -#}
            {% if op.request_body_schema_name is defined -%}
                {% set field_name = op.request_body_schema_name | to_lower_camel_case -%}
                {{ field_name }}: {{ op.request_body_schema_name }},
            {% endif -%}

            {# query parameters -#}
            {# hack: ignore query params on POST -#}
            {# we have some, but they're all special-cased in the client libs -#}
            {% if has_query_params and op.method != "post" -%}
                {% set field_ty -%}
                    {{ resource_type_name }}{{ op.name | to_upper_camel_case }}Options
                {%- endset -%}
                options{% if not has_required_query_params %}?{% endif %}: {{ field_ty }},
            {% endif -%}

            {# PostOptions -#}
            {% if has_header_params -%}
                {# for now, only idempotency-key is supported in header params -#}
                options?: PostOptions,
            {% endif -%}
        ): Promise<{{ response_type }}> {
            return this.api.{{ op.id | to_lower_camel_case }}({
                {# path parameters -#}
                {% for p in op.path_params -%}
                    {{ p | to_lower_camel_case }},
                {% endfor -%}

                {# body parameter interface -#}
                {% if op.request_body_schema_name is defined -%}
                    {{ op.request_body_schema_name | to_lower_camel_case }},
                {% endif -%}

                {# query parameters, PostOptions -#}
                {% if has_query_params and op.method != "post" or has_header_params -%}
                    ...options,
                    {# HACK: if there is an iterator query param and it's null, coerce to undefined -#}
                    {% for p in op.query_params -%}
                        {% if p.name == "iterator" -%}
                            iterator: options?.iterator ?? undefined,
                        {% endif -%}
                    {% endfor -%}
                {% endif -%}
            });
        }{% if not loop.last %}{{ "\n" }}{% endif %}
    {% endfor -%}
}

{% set resource_type_name = resource.name | to_upper_camel_case -%}

use crate::cli_types::Ordering;
use clap::Args;
use svix::api;

{% for op in resource.operations -%}
    {# hack: ignore query params on POST -#}
    {# we have some, but they're all special-cased in the client libs -#}
    {% if op.query_params | length > 0 and op.post != "post" -%}
        {% set query_param_type_name -%}
            {{ resource_type_name }}{{ op.name | to_upper_camel_case }}Options
        {%- endset -%}

        #[derive(Args, Clone)]
        pub struct {{ query_param_type_name }} {
            {% for p in op.query_params -%}
                {% set ty = p.type.to_rust() -%}
                {% if not p.required %}{% set ty %}Option<{{ ty }}>{% endset %}{% endif -%}
                {% if p.description is defined -%}{{ p.description | to_doc_comment(style="rust") }}{% endif %}
                #[arg(long)]
                pub {{ p.name }}: {{ ty }},
            {% endfor %}
        }

        impl From<{{ query_param_type_name }}> for api::{{ query_param_type_name }} {
            fn from(
                {{ query_param_type_name }} {
                    {% for p in op.query_params -%}{{ p.name }},{% endfor %}
                }: {{ query_param_type_name }},
            ) -> Self {
                Self {
                    {% for p in op.query_params -%}
                        {% if p.name == "order" -%}
                            {# temporary until we use the upstream type #}
                            order: order.map(Into::into),
                        {% else -%}
                            {{ p.name }},
                        {% endif -%}
                    {% endfor %}
                }
            }
        }
    {% endif %}
{% endfor %}
